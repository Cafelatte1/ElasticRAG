{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/flash/projects/mygpt/frontend/src/hooks/useAuth.ts"],"sourcesContent":["import React, { useState, useEffect, createContext, useContext } from 'react';\r\n\r\ninterface User {\r\n  username: string;  // 단일 식별자로 username만 사용\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  login: (username: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n  signup: (username: string, password: string) => Promise<void>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | null>(null);\r\n\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      // 백엔드의 토큰 검증 API 호출\r\n      fetch('http://localhost:8000/api/auth/me', {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        }\r\n        throw new Error('Invalid token');\r\n      })\r\n      .then(userData => {\r\n        setUser(userData);\r\n        setIsAuthenticated(true);\r\n      })\r\n      .catch(() => {\r\n        localStorage.removeItem('token');\r\n        setUser(null);\r\n        setIsAuthenticated(false);\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const login = async (username: string, password: string) => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('username', username);  // OAuth2는 'username' 필드를 사용\r\n      formData.append('password', password);\r\n\r\n      const response = await fetch('http://localhost:8000/api/auth/login', {\r\n        method: 'POST',\r\n        body: formData  // JSON 대신 FormData 사용\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        if (error.detail === \"Incorrect email or password\") {\r\n          throw new Error('이메일 또는 비밀번호가 잘못되었습니다');\r\n        }\r\n        throw new Error('로그인 실패');\r\n      }\r\n\r\n      const data = await response.json();\r\n      localStorage.setItem('token', data.access_token);\r\n      \r\n      // 사용자 정보 가져오기\r\n      const userResponse = await fetch('http://localhost:8000/api/auth/me', {\r\n        headers: {\r\n          'Authorization': `Bearer ${data.access_token}`\r\n        }\r\n      });\r\n\r\n      if (userResponse.ok) {\r\n        const userData = await userResponse.json();\r\n        setUser(userData);\r\n        setIsAuthenticated(true);\r\n      }\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  const signup = async (username: string, password: string) => {\r\n    // 이메일 유효성 검사\r\n    if (username.length > 100) {\r\n      throw new Error('이메일은 100자를 초과할 수 없습니다');\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:8000/api/auth/signup', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          username: username,\r\n          password: password,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        if (error.detail === \"Email already registered\") {\r\n          throw new Error('같은 아이디가 존재합니다');\r\n        }\r\n        throw new Error('회원가입 실패');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error: any) {\r\n      console.error('Signup error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  return React.createElement(AuthContext.Provider, \r\n    { value: { user, isAuthenticated, login, logout, signup } },\r\n    children\r\n  );\r\n};\r\n\r\nexport function useAuth() {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/flash/projects/mygpt/frontend/src/pages/_app.tsx"],"sourcesContent":["import \"@/styles/globals.css\";\r\nimport type { AppProps } from \"next/app\";\r\nimport { AuthProvider } from '@/hooks/useAuth';\r\n\r\nexport default function App({ Component, pageProps }: AppProps) {\r\n  return (\r\n    <AuthProvider>\r\n      <Component {...pageProps} />\r\n    </AuthProvider>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;;;;AAEe,SAAS,IAAI,EAAE,SAAS,EAAE,SAAS,EAAY;IAC5D,qBACE,qKAAC,gHAAA,CAAA,eAAY;kBACX,cAAA,qKAAC;YAAW,GAAG,SAAS;;;;;;;;;;;AAG9B"}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}