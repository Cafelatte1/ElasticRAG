{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/flash/projects/mygpt/frontend/src/pages/_document.tsx"],"sourcesContent":["import { Html, Head, Main, NextScript } from \"next/document\";\r\n\r\nexport default function Document() {\r\n  return (\r\n    <Html lang=\"ko\">\r\n      <Head>\r\n        <link\r\n          rel=\"stylesheet\"\r\n          as=\"style\"\r\n          href=\"https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.9/dist/web/static/pretendard.css\"\r\n        />\r\n      </Head>\r\n      <body>\r\n        <Main />\r\n        <NextScript />\r\n      </body>\r\n    </Html>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBACE,qKAAC,yHAAA,CAAA,OAAI;QAAC,MAAK;;0BACT,qKAAC,yHAAA,CAAA,OAAI;0BACH,cAAA,qKAAC;oBACC,KAAI;oBACJ,IAAG;oBACH,MAAK;;;;;;;;;;;0BAGT,qKAAC;;kCACC,qKAAC,yHAAA,CAAA,OAAI;;;;;kCACL,qKAAC,yHAAA,CAAA,aAAU;;;;;;;;;;;;;;;;;AAInB"}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/flash/projects/mygpt/frontend/src/hooks/useAuth.ts"],"sourcesContent":["import React, { useState, useEffect, createContext, useContext } from 'react';\r\n\r\ninterface User {\r\n  username: string;  // 단일 식별자로 username만 사용\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  login: (username: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n  signup: (username: string, password: string) => Promise<void>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | null>(null);\r\n\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      // 백엔드의 토큰 검증 API 호출\r\n      fetch('http://localhost:8000/api/auth/me', {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        }\r\n        throw new Error('Invalid token');\r\n      })\r\n      .then(userData => {\r\n        setUser(userData);\r\n        setIsAuthenticated(true);\r\n      })\r\n      .catch(() => {\r\n        localStorage.removeItem('token');\r\n        setUser(null);\r\n        setIsAuthenticated(false);\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const login = async (username: string, password: string) => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('username', username);  // OAuth2는 'username' 필드를 사용\r\n      formData.append('password', password);\r\n\r\n      const response = await fetch('http://localhost:8000/api/auth/login', {\r\n        method: 'POST',\r\n        body: formData  // JSON 대신 FormData 사용\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        if (error.detail === \"Incorrect email or password\") {\r\n          throw new Error('이메일 또는 비밀번호가 잘못되었습니다');\r\n        }\r\n        throw new Error('로그인 실패');\r\n      }\r\n\r\n      const data = await response.json();\r\n      localStorage.setItem('token', data.access_token);\r\n      \r\n      // 사용자 정보 가져오기\r\n      const userResponse = await fetch('http://localhost:8000/api/auth/me', {\r\n        headers: {\r\n          'Authorization': `Bearer ${data.access_token}`\r\n        }\r\n      });\r\n\r\n      if (userResponse.ok) {\r\n        const userData = await userResponse.json();\r\n        setUser(userData);\r\n        setIsAuthenticated(true);\r\n      }\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  const signup = async (username: string, password: string) => {\r\n    // 이메일 유효성 검사\r\n    if (username.length > 100) {\r\n      throw new Error('이메일은 100자를 초과할 수 없습니다');\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:8000/api/auth/signup', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          username: username,\r\n          password: password,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        if (error.detail === \"Email already registered\") {\r\n          throw new Error('같은 아이디가 존재합니다');\r\n        }\r\n        throw new Error('회원가입 실패');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error: any) {\r\n      console.error('Signup error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  return React.createElement(AuthContext.Provider, \r\n    { value: { user, isAuthenticated, login, logout, signup } },\r\n    children\r\n  );\r\n};\r\n\r\nexport function useAuth() {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/flash/projects/mygpt/frontend/src/pages/_app.tsx"],"sourcesContent":["import \"@/styles/globals.css\";\r\nimport type { AppProps } from \"next/app\";\r\nimport { AuthProvider } from '@/hooks/useAuth';\r\n\r\nexport default function App({ Component, pageProps }: AppProps) {\r\n  return (\r\n    <AuthProvider>\r\n      <Component {...pageProps} />\r\n    </AuthProvider>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;;;;AAEe,SAAS,IAAI,EAAE,SAAS,EAAE,SAAS,EAAY;IAC5D,qBACE,qKAAC,gHAAA,CAAA,eAAY;kBACX,cAAA,qKAAC;YAAW,GAAG,SAAS;;;;;;;;;;;AAG9B"}},
    {"offset": {"line": 259, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 265, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/flash/projects/mygpt/frontend/src/components/auth/LoginForm.tsx"],"sourcesContent":["import { useState } from 'react';\r\nimport { useAuth } from '@/hooks/useAuth';\r\n\r\ninterface LoginFormProps {\r\n  onClose: () => void;\r\n}\r\n\r\nexport default function LoginForm({ onClose }: LoginFormProps) {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const { login } = useAuth();\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setError('');\r\n\r\n    try {\r\n      await login(email, password);\r\n      onClose();\r\n    } catch (err: any) {\r\n      if (err.message.includes('not found')) {\r\n        setError('아이디가 존재하지 않습니다');\r\n      } else if (err.message.includes('password')) {\r\n        setError('비밀번호 오류입니다');\r\n      } else {\r\n        setError('로그인 중 오류가 발생했습니다');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n      <div>\r\n        <label className=\"block text-sm font-medium text-gray-700\">이메일</label>\r\n        <input\r\n          type=\"email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none\"\r\n          required\r\n        />\r\n      </div>\r\n      <div>\r\n        <label className=\"block text-sm font-medium text-gray-700\">비밀번호</label>\r\n        <input\r\n          type=\"password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none\"\r\n          required\r\n        />\r\n      </div>\r\n      {error && (\r\n        <div className=\"text-red-500 text-sm\">{error}</div>\r\n      )}\r\n      <button\r\n        type=\"submit\"\r\n        className=\"w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 transition-colors\"\r\n      >\r\n        로그인\r\n      </button>\r\n    </form>\r\n  );\r\n} "],"names":[],"mappings":";;;;AAAA;AACA;;;;AAMe,SAAS,UAAU,EAAE,OAAO,EAAkB;IAC3D,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IACnC,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IACzC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IACnC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,gHAAA,CAAA,UAAO,AAAD;IAExB,MAAM,eAAe,OAAO;QAC1B,EAAE,cAAc;QAChB,SAAS;QAET,IAAI;YACF,MAAM,MAAM,OAAO;YACnB;QACF,EAAE,OAAO,KAAU;YACjB,IAAI,IAAI,OAAO,CAAC,QAAQ,CAAC,cAAc;gBACrC,SAAS;YACX,OAAO,IAAI,IAAI,OAAO,CAAC,QAAQ,CAAC,aAAa;gBAC3C,SAAS;YACX,OAAO;gBACL,SAAS;YACX;QACF;IACF;IAEA,qBACE,qKAAC;QAAK,UAAU;QAAc,WAAU;;0BACtC,qKAAC;;kCACC,qKAAC;wBAAM,WAAU;kCAA0C;;;;;;kCAC3D,qKAAC;wBACC,MAAK;wBACL,OAAO;wBACP,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;wBACxC,WAAU;wBACV,QAAQ;;;;;;;;;;;;0BAGZ,qKAAC;;kCACC,qKAAC;wBAAM,WAAU;kCAA0C;;;;;;kCAC3D,qKAAC;wBACC,MAAK;wBACL,OAAO;wBACP,UAAU,CAAC,IAAM,YAAY,EAAE,MAAM,CAAC,KAAK;wBAC3C,WAAU;wBACV,QAAQ;;;;;;;;;;;;YAGX,uBACC,qKAAC;gBAAI,WAAU;0BAAwB;;;;;;0BAEzC,qKAAC;gBACC,MAAK;gBACL,WAAU;0BACX;;;;;;;;;;;;AAKP"}},
    {"offset": {"line": 377, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 383, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/flash/projects/mygpt/frontend/src/components/auth/SignupForm.tsx"],"sourcesContent":["import { useState } from 'react';\r\nimport { useAuth } from '@/hooks/useAuth';\r\n\r\ninterface SignupFormProps {\r\n  onClose: () => void;\r\n}\r\n\r\nexport default function SignupForm({ onClose }: SignupFormProps) {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState(false);\r\n  const { signup } = useAuth();\r\n\r\n  const validateEmail = (email: string) => {\r\n    if (email.length > 100) {\r\n      return '이메일은 100자를 초과할 수 없습니다';\r\n    }\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(email)) {\r\n      return '유효한 이메일 주소를 입력해주세요';\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setError('');\r\n\r\n    // 이메일 유효성 검사\r\n    const emailError = validateEmail(email);\r\n    if (emailError) {\r\n      setError(emailError);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await signup(email, password);\r\n      setSuccess(true);\r\n      setTimeout(() => {\r\n        onClose();\r\n      }, 2000);\r\n    } catch (err: any) {\r\n      if (err.message.includes('같은 아이디가 존재합니다')) {\r\n        setError('같은 아이디가 존재합니다');\r\n        setEmail('');\r\n        setPassword('');\r\n      } else if (err.message.includes('100자를 초과')) {\r\n        setError('이메일은 100자를 초과할 수 없습니다');\r\n      } else {\r\n        setError('회원가입 중 오류가 발생했습니다');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n      {success ? (\r\n        <div className=\"text-green-500 text-center py-4\">\r\n          회원가입이 완료되었습니다!\r\n          <br />\r\n          로그인 해주세요.\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700\">이메일</label>\r\n            <input\r\n              type=\"email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              maxLength={100}\r\n              className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none\"\r\n              required\r\n            />\r\n            <p className=\"text-xs text-gray-500 mt-1\">최대 100자</p>\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700\">비밀번호</label>\r\n            <input\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none\"\r\n              required\r\n            />\r\n          </div>\r\n          {error && (\r\n            <div className=\"text-red-500 text-sm\">{error}</div>\r\n          )}\r\n          <button\r\n            type=\"submit\"\r\n            className=\"w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 transition-colors\"\r\n          >\r\n            회원가입\r\n          </button>\r\n        </>\r\n      )}\r\n    </form>\r\n  );\r\n} "],"names":[],"mappings":";;;;AAAA;AACA;;;;AAMe,SAAS,WAAW,EAAE,OAAO,EAAmB;IAC7D,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IACnC,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IACzC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IACnC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,gHAAA,CAAA,UAAO,AAAD;IAEzB,MAAM,gBAAgB,CAAC;QACrB,IAAI,MAAM,MAAM,GAAG,KAAK;YACtB,OAAO;QACT;QACA,MAAM,aAAa;QACnB,IAAI,CAAC,WAAW,IAAI,CAAC,QAAQ;YAC3B,OAAO;QACT;QACA,OAAO;IACT;IAEA,MAAM,eAAe,OAAO;QAC1B,EAAE,cAAc;QAChB,SAAS;QAET,aAAa;QACb,MAAM,aAAa,cAAc;QACjC,IAAI,YAAY;YACd,SAAS;YACT;QACF;QAEA,IAAI;YACF,MAAM,OAAO,OAAO;YACpB,WAAW;YACX,WAAW;gBACT;YACF,GAAG;QACL,EAAE,OAAO,KAAU;YACjB,IAAI,IAAI,OAAO,CAAC,QAAQ,CAAC,kBAAkB;gBACzC,SAAS;gBACT,SAAS;gBACT,YAAY;YACd,OAAO,IAAI,IAAI,OAAO,CAAC,QAAQ,CAAC,aAAa;gBAC3C,SAAS;YACX,OAAO;gBACL,SAAS;YACX;QACF;IACF;IAEA,qBACE,qKAAC;QAAK,UAAU;QAAc,WAAU;kBACrC,wBACC,qKAAC;YAAI,WAAU;;gBAAkC;8BAE/C,qKAAC;;;;;gBAAK;;;;;;iCAIR;;8BACE,qKAAC;;sCACC,qKAAC;4BAAM,WAAU;sCAA0C;;;;;;sCAC3D,qKAAC;4BACC,MAAK;4BACL,OAAO;4BACP,UAAU,CAAC,IAAM,SAAS,EAAE,MAAM,CAAC,KAAK;4BACxC,WAAW;4BACX,WAAU;4BACV,QAAQ;;;;;;sCAEV,qKAAC;4BAAE,WAAU;sCAA6B;;;;;;;;;;;;8BAE5C,qKAAC;;sCACC,qKAAC;4BAAM,WAAU;sCAA0C;;;;;;sCAC3D,qKAAC;4BACC,MAAK;4BACL,OAAO;4BACP,UAAU,CAAC,IAAM,YAAY,EAAE,MAAM,CAAC,KAAK;4BAC3C,WAAU;4BACV,QAAQ;;;;;;;;;;;;gBAGX,uBACC,qKAAC;oBAAI,WAAU;8BAAwB;;;;;;8BAEzC,qKAAC;oBACC,MAAK;oBACL,WAAU;8BACX;;;;;;;;;;;;;AAOX"}},
    {"offset": {"line": 543, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 549, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/flash/projects/mygpt/frontend/src/components/auth/AuthModal.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport LoginForm from '../auth/LoginForm';\r\nimport SignupForm from '../auth/SignupForm';\r\n\r\ninterface AuthModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  initialMode?: 'login' | 'signup';\r\n}\r\n\r\nexport default function AuthModal({ isOpen, onClose, initialMode = 'login' }: AuthModalProps) {\r\n  useEffect(() => {\r\n    setMode(initialMode);\r\n  }, [initialMode]);\r\n\r\n  const [mode, setMode] = useState<'login' | 'signup'>(initialMode);\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n      <div className=\"bg-white rounded-lg p-8 max-w-md w-full\">\r\n        <div className=\"flex justify-between items-center mb-6\">\r\n          <h2 className=\"text-2xl font-semibold\">\r\n            {mode === 'login' ? '로그인' : '회원가입'}\r\n          </h2>\r\n          <button onClick={onClose} className=\"text-gray-500 hover:text-gray-700\">\r\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n\r\n        {mode === 'login' ? (\r\n          <LoginForm onClose={onClose} />\r\n        ) : (\r\n          <SignupForm onClose={onClose} />\r\n        )}\r\n\r\n        <div className=\"mt-4 text-center\">\r\n          {mode === 'login' ? (\r\n            <button\r\n              onClick={() => setMode('signup')}\r\n              className=\"text-blue-500 hover:text-blue-600\"\r\n            >\r\n              계정이 없으신가요? 회원가입\r\n            </button>\r\n          ) : (\r\n            <button\r\n              onClick={() => setMode('login')}\r\n              className=\"text-blue-500 hover:text-blue-600\"\r\n            >\r\n              이미 계정이 있으신가요? 로그인\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AAQe,SAAS,UAAU,EAAE,MAAM,EAAE,OAAO,EAAE,cAAc,OAAO,EAAkB;IAC1F,CAAA,GAAA,mGAAA,CAAA,YAAS,AAAD,EAAE;QACR,QAAQ;IACV,GAAG;QAAC;KAAY;IAEhB,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAsB;IAErD,IAAI,CAAC,QAAQ,OAAO;IAEpB,qBACE,qKAAC;QAAI,WAAU;kBACb,cAAA,qKAAC;YAAI,WAAU;;8BACb,qKAAC;oBAAI,WAAU;;sCACb,qKAAC;4BAAG,WAAU;sCACX,SAAS,UAAU,QAAQ;;;;;;sCAE9B,qKAAC;4BAAO,SAAS;4BAAS,WAAU;sCAClC,cAAA,qKAAC;gCAAI,WAAU;gCAAU,MAAK;gCAAO,QAAO;gCAAe,SAAQ;0CACjE,cAAA,qKAAC;oCAAK,eAAc;oCAAQ,gBAAe;oCAAQ,aAAa;oCAAG,GAAE;;;;;;;;;;;;;;;;;;;;;;gBAK1E,SAAS,wBACR,qKAAC,gIAAA,CAAA,UAAS;oBAAC,SAAS;;;;;yCAEpB,qKAAC,iIAAA,CAAA,UAAU;oBAAC,SAAS;;;;;;8BAGvB,qKAAC;oBAAI,WAAU;8BACZ,SAAS,wBACR,qKAAC;wBACC,SAAS,IAAM,QAAQ;wBACvB,WAAU;kCACX;;;;;6CAID,qKAAC;wBACC,SAAS,IAAM,QAAQ;wBACvB,WAAU;kCACX;;;;;;;;;;;;;;;;;;;;;;AAQb"}},
    {"offset": {"line": 667, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 705, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/flash/projects/mygpt/frontend/src/components/common/Header.tsx"],"sourcesContent":["import { useState } from 'react';\r\nimport { useAuth } from '@/hooks/useAuth';\r\nimport Link from 'next/link';\r\nimport AuthModal from '../auth/AuthModal';\r\nimport Image from 'next/image';\r\nimport { useRouter } from 'next/router';\r\n\r\nexport default function Header() {\r\n  const router = useRouter();\r\n  const { user, isAuthenticated, logout } = useAuth();\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [modalMode, setModalMode] = useState<'login' | 'signup'>('login');\r\n  const isSignupDisabled = true;\r\n\r\n  // 기능별 활성화 상태 관리\r\n  const featureFlags = {\r\n    aiSearch: true,  // AI Search 기능 비활성화\r\n    aiDocument: false // AI Document 기능 비활성화\r\n  };\r\n\r\n  const openModal = (mode: 'login' | 'signup') => {\r\n    setModalMode(mode);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleProtectedLink = (e: React.MouseEvent, path: string) => {\r\n    e.preventDefault();\r\n    \r\n    // 기능별 활성화 상태 체크\r\n    if (path === '/ai-search' && !featureFlags.aiSearch) {\r\n      alert('현재 개발중인 기능입니다.');\r\n      return;\r\n    }\r\n    if (path === '/ai-document' && !featureFlags.aiDocument) {\r\n      alert('현재 개발중인 기능입니다.');\r\n      return;\r\n    }\r\n\r\n    if (!isAuthenticated) {\r\n      alert('로그인을 먼저 해주세요.');\r\n      return;\r\n    }\r\n    router.push(path);\r\n  };\r\n\r\n  const handleSignupClick = () => {\r\n    if (isSignupDisabled) {\r\n      alert('직접 회원가입은 현재 불가능합니다. 관리자에게 문의해 주세요.');\r\n      return;\r\n    }\r\n    openModal('signup');\r\n  };\r\n\r\n  const handleLogout = async () => {\r\n    await logout();\r\n    router.push('/');  // 홈으로 리다이렉트\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <header className=\"fixed w-full bg-white shadow-sm\">\r\n        <div className=\"container mx-auto px-6 py-4\">\r\n          <nav className=\"flex justify-between items-center\">\r\n            <div className=\"flex items-center\">\r\n              {/* <Image \r\n                src=\"/images/logos/penguin.jpg\" \r\n                alt=\"Company Logo\" \r\n                width={150} \r\n                height={60} \r\n                className=\"mr-6\"\r\n              /> */}\r\n              <Link href=\"/\" \r\n                 className=\"text-gray-600 hover:text-blue-600 font-medium px-4 py-2 rounded-lg hover:bg-blue-50 transition-colors\">\r\n                Home\r\n              </Link>\r\n              <div className=\"h-6 w-[2px] bg-gray-300 mx-2\"></div>\r\n              <a href=\"/ai-search\" \r\n                onClick={(e) => handleProtectedLink(e, '/ai-search')}\r\n                className=\"text-gray-600 hover:text-blue-600 font-medium px-4 py-2 rounded-lg hover:bg-blue-50 transition-colors cursor-pointer\">\r\n                AI Search\r\n              </a>\r\n              <div className=\"h-6 w-[2px] bg-gray-300 mx-2\"></div>\r\n              <a href=\"/ai-document\" \r\n                onClick={(e) => handleProtectedLink(e, '/ai-document')}\r\n                className=\"text-gray-600 hover:text-blue-600 font-medium px-4 py-2 rounded-lg hover:bg-blue-50 transition-colors cursor-pointer\">\r\n                AI Document Automation\r\n              </a>\r\n            </div>\r\n\r\n            <div className=\"flex items-center space-x-4\">\r\n              {isAuthenticated ? (\r\n                <div className=\"flex items-center space-x-4\">\r\n                  <span className=\"text-gray-700\">{user?.username}</span>\r\n                  <button\r\n                    onClick={handleLogout}\r\n                    className=\"text-gray-600 hover:text-blue-600 font-medium px-4 py-2 rounded-lg hover:bg-blue-50 transition-colors\"\r\n                  >\r\n                    로그아웃\r\n                  </button>\r\n                </div>\r\n              ) : (\r\n                <>\r\n                  <button\r\n                    onClick={() => openModal('login')}\r\n                    className=\"text-gray-600 hover:text-blue-600 font-medium px-4 py-2 rounded-lg hover:bg-blue-50 transition-colors\"\r\n                  >\r\n                    로그인\r\n                  </button>\r\n                  <button\r\n                    onClick={handleSignupClick}\r\n                    className=\"text-gray-600 hover:text-blue-600 font-medium px-4 py-2 rounded-lg hover:bg-blue-50 transition-colors\"\r\n                  >\r\n                    회원가입\r\n                  </button>\r\n                </>\r\n              )}\r\n            </div>\r\n          </nav>\r\n        </div>\r\n      </header>\r\n\r\n      <AuthModal\r\n        isOpen={isModalOpen}\r\n        onClose={() => setIsModalOpen(false)}\r\n        initialMode={modalMode}\r\n      />\r\n    </>\r\n  );\r\n} "],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AAEA;;;;;;;AAEe,SAAS;IACtB,MAAM,SAAS,CAAA,GAAA,uHAAA,CAAA,YAAS,AAAD;IACvB,MAAM,EAAE,IAAI,EAAE,eAAe,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,gHAAA,CAAA,UAAO,AAAD;IAChD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAsB;IAC/D,MAAM,mBAAmB;IAEzB,gBAAgB;IAChB,MAAM,eAAe;QACnB,UAAU;QACV,YAAY,MAAM,sBAAsB;IAC1C;IAEA,MAAM,YAAY,CAAC;QACjB,aAAa;QACb,eAAe;IACjB;IAEA,MAAM,sBAAsB,CAAC,GAAqB;QAChD,EAAE,cAAc;QAEhB,gBAAgB;QAChB,IAAI,SAAS,gBAAgB,CAAC,aAAa,QAAQ,EAAE;YACnD,MAAM;YACN;QACF;QACA,IAAI,SAAS,kBAAkB,CAAC,aAAa,UAAU,EAAE;YACvD,MAAM;YACN;QACF;QAEA,IAAI,CAAC,iBAAiB;YACpB,MAAM;YACN;QACF;QACA,OAAO,IAAI,CAAC;IACd;IAEA,MAAM,oBAAoB;QACxB,wCAAsB;YACpB,MAAM;YACN;QACF;;IAEF;IAEA,MAAM,eAAe;QACnB,MAAM;QACN,OAAO,IAAI,CAAC,MAAO,YAAY;IACjC;IAEA,qBACE;;0BACE,qKAAC;gBAAO,WAAU;0BAChB,cAAA,qKAAC;oBAAI,WAAU;8BACb,cAAA,qKAAC;wBAAI,WAAU;;0CACb,qKAAC;gCAAI,WAAU;;kDAQb,qKAAC,qHAAA,CAAA,UAAI;wCAAC,MAAK;wCACR,WAAU;kDAAwG;;;;;;kDAGrH,qKAAC;wCAAI,WAAU;;;;;;kDACf,qKAAC;wCAAE,MAAK;wCACN,SAAS,CAAC,IAAM,oBAAoB,GAAG;wCACvC,WAAU;kDAAuH;;;;;;kDAGnI,qKAAC;wCAAI,WAAU;;;;;;kDACf,qKAAC;wCAAE,MAAK;wCACN,SAAS,CAAC,IAAM,oBAAoB,GAAG;wCACvC,WAAU;kDAAuH;;;;;;;;;;;;0CAKrI,qKAAC;gCAAI,WAAU;0CACZ,gCACC,qKAAC;oCAAI,WAAU;;sDACb,qKAAC;4CAAK,WAAU;sDAAiB,MAAM;;;;;;sDACvC,qKAAC;4CACC,SAAS;4CACT,WAAU;sDACX;;;;;;;;;;;yDAKH;;sDACE,qKAAC;4CACC,SAAS,IAAM,UAAU;4CACzB,WAAU;sDACX;;;;;;sDAGD,qKAAC;4CACC,SAAS;4CACT,WAAU;sDACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAUb,qKAAC,gIAAA,CAAA,UAAS;gBACR,QAAQ;gBACR,SAAS,IAAM,eAAe;gBAC9B,aAAa;;;;;;;;AAIrB"}},
    {"offset": {"line": 906, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 912, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/flash/projects/mygpt/frontend/src/components/ai-search/document/DocumentUpload.tsx"],"sourcesContent":["import { useState, useRef, useEffect, forwardRef, useImperativeHandle } from 'react';\n\ninterface Document {\n  id: number;\n  title: string;\n  extension: string;\n  created_at: string;\n  progress: number;\n}\n\ninterface GroupedDocuments {\n  text: Document[];\n  image: Document[];\n  plain: Document[];\n}\n\ntype SortField = 'type' | 'title' | 'created_at' | 'progress';\ntype SortOrder = 'asc' | 'desc';\n\ninterface Filters {\n  type: string[];\n  progress: number[];\n}\n\ninterface PlainTextInput {\n  title: string;\n  content: string;\n}\n\nconst DocumentUpload = forwardRef((props, ref) => {\n  const [isUploading, setIsUploading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const imageFileInputRef = useRef<HTMLInputElement>(null);\n  const [documents, setDocuments] = useState<GroupedDocuments>({\n    text: [],\n    image: [],\n    plain: []\n  });\n  const [sortField, setSortField] = useState<SortField>('created_at');\n  const [sortOrder, setSortOrder] = useState<SortOrder>('desc');\n  const [filters, setFilters] = useState<Filters>({\n    type: [],\n    progress: []\n  });\n  const [isPlainTextModalOpen, setIsPlainTextModalOpen] = useState(false);\n  const [plainTextInput, setPlainTextInput] = useState<PlainTextInput>({\n    title: '',\n    content: ''\n  });\n\n  const handleTextUpload = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleImageUpload = () => {\n    imageFileInputRef.current?.click();\n  };\n\n  const MAX_FILES = 2;\n\n  const handleFileUpload = async (files: FileList, procType: string) => {\n    if (files.length > MAX_FILES) {\n      alert(`최대 ${MAX_FILES}개의 파일만 선택할 수 있습니다.`);\n      return;\n    }\n\n    try {\n      setIsUploading(true);\n\n      const formData = new FormData();\n      Array.from(files).forEach(file => {\n        formData.append('files', file);\n      });\n      formData.append('proc_type', procType);\n\n      const token = localStorage.getItem('token');\n      const response = await fetch('http://localhost:8000/api/ai-search/upload-document', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        },\n        body: formData\n      });\n\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n\n      const data = await response.json();\n      alert(`${data.documents.length}개의 문서가 성공적으로 업로드되었습니다.`);\n      \n      // 파일 입력 초기화\n      if (fileInputRef.current) fileInputRef.current.value = '';\n      if (imageFileInputRef.current) imageFileInputRef.current.value = '';\n\n      // 업로드 성공 시 문서 목록 갱신\n      await fetchDocuments();\n\n    } catch (error) {\n      console.error('Error uploading documents:', error);\n      alert('문서 업로드에 실패했습니다.');\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleTextFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (!files || files.length === 0) return;\n\n    if (files.length > MAX_FILES) {\n      alert(`최대 ${MAX_FILES}개의 파일만 선택할 수 있습니다.`);\n      if (fileInputRef.current) fileInputRef.current.value = '';\n      return;\n    }\n\n    // 모든 파일 검사\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      const allowedTypes = ['.txt', '.pdf'];\n      const fileExt = file.name.substring(file.name.lastIndexOf('.')).toLowerCase();\n      if (!allowedTypes.includes(fileExt)) {\n        alert(`지원하지 않는 파일 형식입니다: ${file.name} (지원 형식: TXT, PDF)`);\n        if (fileInputRef.current) fileInputRef.current.value = '';\n        return;\n      }\n    }\n\n    await handleFileUpload(files, 'text');\n  };\n\n  const handleImageFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (!files || files.length === 0) return;\n\n    if (files.length > MAX_FILES) {\n      alert(`최대 ${MAX_FILES}개의 파일만 선택할 수 있습니다.`);\n      if (imageFileInputRef.current) imageFileInputRef.current.value = '';\n      return;\n    }\n\n    // 모든 파일 검사\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      const allowedTypes = ['.pptx', '.pdf', '.jpg', '.png'];\n      const fileExt = file.name.substring(file.name.lastIndexOf('.')).toLowerCase();\n      if (!allowedTypes.includes(fileExt)) {\n        alert(`지원하지 않는 파일 형식입니다: ${file.name} (지원 형식: PPTX, PDF, JPG, PNG)`);\n        if (imageFileInputRef.current) imageFileInputRef.current.value = '';\n        return;\n      }\n    }\n\n    await handleFileUpload(files, 'image');\n  };\n\n  // 문서 목록 조회\n  const fetchDocuments = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch('http://localhost:8000/api/ai-search/get-documents', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      if (!response.ok) throw new Error('Failed to fetch documents');\n      \n      const data = await response.json();\n      setDocuments(data);\n    } catch (error) {\n      console.error('Error fetching documents:', error);\n    }\n  };\n\n  // 컴포넌트 마운트 시와 업로드 성공 시 문서 목록 갱신\n  useEffect(() => {\n    fetchDocuments();\n  }, []);\n\n  // 문서 상태에 따른 배지 컴포넌트\n  const ProgressBadge = ({ progress }: { progress: number }) => {\n    const baseClasses = \"inline-flex px-2 py-1 text-xs rounded-full items-center justify-center min-w-[60px]\";\n    \n    if (progress === 100) {\n      return <span className={`${baseClasses} bg-green-100 text-green-800`}>완료</span>;\n    } else if (progress === -1) {\n      return <span className={`${baseClasses} bg-red-100 text-red-800`}>실패</span>;\n    } else if (progress === 0) {\n      return <span className={`${baseClasses} bg-red-50 text-red-600`}>대기</span>;\n    } else {\n      return <span className={`${baseClasses} bg-blue-100 text-blue-800`}>{progress}%</span>;\n    }\n  };\n\n  // 문서 목록 카드 컴포넌트\n  const DocumentCard = ({ title, type, documents }: { title: string, type: 'text' | 'image' | 'plain', documents: Document[] }) => {\n    const handleDelete = async (docId: number) => {\n      if (!confirm('정말 이 문서를 삭제하시겠습니까?')) {\n        return;\n      }\n\n      try {\n        const token = localStorage.getItem('token');\n        const response = await fetch(`http://localhost:8000/api/ai-search/delete-document/${docId}`, {\n          method: 'DELETE',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n\n        if (!response.ok) throw new Error('Failed to delete document');\n        \n        alert('문서가 삭제되었습니다.');\n        fetchDocuments();  // 문서 목록 갱신\n      } catch (error) {\n        console.error('Error deleting document:', error);\n        alert('문서 삭제에 실패했습니다.');\n      }\n    };\n\n    return (\n      <div className=\"flex flex-col p-6 bg-white dark:bg-gray-800 rounded-xl shadow-lg\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">{title}</h3>\n        <div className=\"flex-1 overflow-y-auto max-h-60\">\n          {documents.length === 0 ? (\n            <p className=\"text-gray-500 dark:text-gray-400 text-sm\">등록된 문서가 없습니다.</p>\n          ) : (\n            <ul className=\"space-y-3\">\n              {documents.map((doc) => (\n                <li key={doc.id} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                  <div className=\"flex-1 min-w-0 mr-4\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100 truncate\">\n                      {doc.title}\n                    </p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      {new Date(doc.created_at).toLocaleString('ko-KR', {\n                        year: 'numeric',\n                        month: '2-digit',\n                        day: '2-digit',\n                        hour: '2-digit',\n                        minute: '2-digit',\n                        second: '2-digit',\n                        hour12: false\n                      })}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <ProgressBadge progress={doc.progress} />\n                    <button\n                      onClick={() => handleDelete(doc.id)}\n                      className=\"p-1 text-gray-500 hover:text-red-500 dark:text-gray-400 dark:hover:text-red-400 transition-colors\"\n                      title=\"삭제\"\n                    >\n                      <TrashIcon className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const handleDelete = async (docId: number) => {\n    if (!confirm('정말 이 문서를 삭제하시겠습니까?')) {\n      return;\n    }\n\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch('http://localhost:8000/api/ai-search/delete-document/', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ doc_id: docId }),\n      });\n\n      if (!response.ok) throw new Error('Failed to delete document');\n      \n      alert('문서가 삭제되었습니다.');\n      fetchDocuments();  // 문서 목록 갱신\n    } catch (error) {\n      console.error('Error deleting document:', error);\n      alert('문서 삭제에 실패했습니다.');\n    }\n  };\n\n  // 정렬 함수 추가\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortOrder('asc');\n    }\n  };\n\n  // 정렬된 문서 목록을 반환하는 함수 수정\n  const getFilteredAndSortedDocuments = (allDocs: [string, Document[]][]) => {\n    let documents = allDocs.flatMap(([type, docs]) => \n      docs.map(doc => ({...doc, type}))\n    );\n\n    // 필터 적용\n    if (filters.type.length > 0) {\n      documents = documents.filter(doc => filters.type.includes(doc.type));\n    }\n\n    if (filters.progress.length > 0) {\n      documents = documents.filter(doc => \n        filters.progress.includes(\n          doc.progress === 100 ? 100 : \n          doc.progress === -1 ? -1 : \n          doc.progress === 0 ? 0 : 1\n        )\n      );\n    }\n\n    // 정렬 적용\n    documents.sort((a, b) => {\n      if (sortField === 'type') {\n        const typeOrder = {\n          text: 1,\n          image: 2,\n          plain: 3\n        };\n        const orderA = typeOrder[a.type as keyof typeof typeOrder];\n        const orderB = typeOrder[b.type as keyof typeof typeOrder];\n        return sortOrder === 'asc' ? orderA - orderB : orderB - orderA;\n      }\n      if (sortField === 'title') {\n        return sortOrder === 'asc'\n          ? a.title.localeCompare(b.title)\n          : b.title.localeCompare(a.title);\n      }\n      if (sortField === 'created_at') {\n        return sortOrder === 'asc'\n          ? new Date(a.created_at).getTime() - new Date(b.created_at).getTime()\n          : new Date(b.created_at).getTime() - new Date(a.created_at).getTime();\n      }\n      if (sortField === 'progress') {\n        return sortOrder === 'asc'\n          ? a.progress - b.progress\n          : b.progress - a.progress;\n      }\n      return 0;\n    });\n\n    return documents;\n  };\n\n  // 필터 토글 함수\n  const toggleFilter = (category: 'type' | 'progress', value: string | number) => {\n    setFilters(prev => {\n      const currentFilters = prev[category];\n      const newFilters = currentFilters.includes(value as never)\n        ? currentFilters.filter(v => v !== value)\n        : [...currentFilters, value];\n      \n      return {\n        ...prev,\n        [category]: newFilters\n      };\n    });\n  };\n\n  // FilterIcon 컴포넌트 추가 (파일 맨 아래 다른 아이콘들과 함께)\n  const FilterIcon = ({ className }: { className?: string }) => (\n    <svg \n      xmlns=\"http://www.w3.org/2000/svg\" \n      className={className} \n      fill=\"none\" \n      viewBox=\"0 0 24 24\" \n      stroke=\"currentColor\"\n    >\n      <path \n        strokeLinecap=\"round\" \n        strokeLinejoin=\"round\" \n        strokeWidth={2} \n        d=\"M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z\" \n      />\n    </svg>\n  );\n\n  // FilterDropdown 컴포넌트 수정\n  const FilterDropdown = ({ \n    category,\n    options\n  }: { \n    category: 'type' | 'progress',\n    options: { label: string; value: string | number }[]\n  }) => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    return (\n      <div className=\"relative inline-block\">\n        <button\n          onClick={() => setIsOpen(!isOpen)}\n          className=\"p-1 text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded\"\n        >\n          <FilterIcon className=\"w-4 h-4\" />\n        </button>\n        \n        {isOpen && (\n          <div className=\"absolute z-10 mt-1 left-0 min-w-[120px] bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg\">\n            <div className=\"py-2\">\n              {options.map(({ label, value }) => (\n                <label key={value} className=\"flex items-center px-4 py-2 hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={filters[category].includes(value as never)}\n                    onChange={() => toggleFilter(category, value)}\n                    className=\"rounded border-gray-300 dark:border-gray-600 text-blue-500 mr-3\"\n                  />\n                  <span className=\"text-sm text-gray-700 dark:text-gray-300 whitespace-nowrap\">{label}</span>\n                </label>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  // SortHeader 컴포넌트 수정\n  const SortHeader = ({ field, title, className, filter }: { \n    field: SortField, \n    title: string,\n    className?: string,\n    filter?: {\n      category: 'type' | 'progress',\n      options: { label: string; value: string | number }[]\n    }\n  }) => (\n    <th className={`sticky top-0 px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider ${className}`}>\n      <div className=\"flex items-center space-x-2\">\n        <div \n          className=\"cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 px-2 py-1 rounded\"\n          onClick={() => handleSort(field)}\n        >\n          <div className=\"flex items-center space-x-1\">\n            <span>{title}</span>\n            <span className=\"text-gray-400\">\n              {sortField === field && (\n                sortOrder === 'asc' ? '↑' : '↓'\n              )}\n            </span>\n          </div>\n        </div>\n        {filter && (\n          <FilterDropdown\n            category={filter.category}\n            options={filter.options}\n          />\n        )}\n      </div>\n    </th>\n  );\n\n  // 직접 입력 처리 함수 추가\n  const handlePlainTextSubmit = async () => {\n    if (!plainTextInput.title.trim() || !plainTextInput.content.trim()) {\n      alert('제목과 내용을 모두 입력해주세요.');\n      return;\n    }\n\n    try {\n      setIsUploading(true);\n      const token = localStorage.getItem('token');\n      const response = await fetch('http://localhost:8000/api/ai-search/upload-plain-text', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          title: plainTextInput.title,\n          content: plainTextInput.content,\n          proc_type: 'plain'\n        }),\n      });\n\n      if (!response.ok) throw new Error('Upload failed');\n\n      const data = await response.json();\n      alert('문서가 성공적으로 업로드되었습니다.');\n      \n      // 입력 초기화 및 모달 닫기\n      setPlainTextInput({ title: '', content: '' });\n      setIsPlainTextModalOpen(false);\n      \n      // 문서 목록 갱신\n      await fetchDocuments();\n\n    } catch (error) {\n      console.error('Error uploading plain text:', error);\n      alert('문서 업로드에 실패했습니다.');\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  // 모달 컴포넌트 추가\n  const PlainTextModal = () => (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-2xl mx-4\">\n        <div className=\"p-6\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100\">직접 입력</h2>\n            <button\n              onClick={() => setIsPlainTextModalOpen(false)}\n              className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </button>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                제목\n              </label>\n              <input\n                type=\"text\"\n                value={plainTextInput.title}\n                onChange={(e) => setPlainTextInput(prev => ({ ...prev, title: e.target.value }))}\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-gray-100\"\n                placeholder=\"문서 제목을 입력하세요\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                내용\n              </label>\n              <textarea\n                value={plainTextInput.content}\n                onChange={(e) => setPlainTextInput(prev => ({ ...prev, content: e.target.value }))}\n                rows={10}\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-gray-100\"\n                placeholder=\"내용을 입력하세요\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"mt-6 flex justify-end space-x-3\">\n            <button\n              onClick={() => setIsPlainTextModalOpen(false)}\n              className=\"px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md\"\n            >\n              취소\n            </button>\n            <button\n              onClick={handlePlainTextSubmit}\n              disabled={isUploading}\n              className=\"px-4 py-2 text-sm font-medium text-white bg-blue-500 hover:bg-blue-600 rounded-md disabled:opacity-50\"\n            >\n              {isUploading ? '업로드 중...' : '업로드'}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  // 직접 입력 버튼 클릭 핸들러 수정\n  const handlePlainTextClick = () => {\n    setIsPlainTextModalOpen(true);\n  };\n\n  // 외부에서 접근할 메서드 노출\n  useImperativeHandle(ref, () => ({\n    handleFileUpload\n  }));\n\n  return (\n    <div className=\"space-y-8\">\n      {/* 파일 input */}\n      <input type=\"file\" ref={fileInputRef} onChange={handleTextFileChange} accept=\".txt,.pdf\" multiple className=\"hidden\" />\n      <input type=\"file\" ref={imageFileInputRef} onChange={handleImageFileChange} accept=\".pptx,.pdf,.jpg,.png\" multiple className=\"hidden\" />\n\n      {/* 문서 목록 테이블 */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow\">\n        <table className=\"w-full border-collapse\">\n          <thead className=\"bg-gray-50 dark:bg-gray-700\">\n            <tr className=\"border-b border-gray-200 dark:border-gray-600\">\n              <SortHeader \n                field=\"type\" \n                title=\"유형\" \n                className=\"w-[20%]\"\n                filter={{\n                  category: 'type',\n                  options: [\n                    { label: '텍스트', value: 'text' },\n                    { label: '이미지', value: 'image' },\n                    { label: '직접 입력', value: 'plain' }\n                  ]\n                }}\n              />\n              <SortHeader \n                field=\"title\" \n                title=\"문서명\" \n                className=\"w-[35%]\"\n              />\n              <SortHeader \n                field=\"created_at\" \n                title=\"등록일\" \n                className=\"w-[20%]\"\n              />\n              <SortHeader \n                field=\"progress\" \n                title=\"상태\"\n                className=\"w-[15%] text-center\"\n                filter={{\n                  category: 'progress',\n                  options: [\n                    { label: '대기', value: 0 },\n                    { label: '진행', value: 1 },\n                    { label: '완료', value: 100 },\n                    { label: '실패', value: -1 }\n                  ]\n                }}\n              />\n              <th className=\"sticky top-0 px-4 py-3 text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider w-[10%]\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"px-2 py-1 rounded\">\n                    <div className=\"flex items-center space-x-1\">\n                      <span>작업</span>\n                    </div>\n                  </div>\n                </div>\n              </th>\n            </tr>\n          </thead>\n        </table>\n        <div className=\"overflow-y-auto max-h-[600px]\">\n          <table className=\"w-full border-collapse\">\n            <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n              {getFilteredAndSortedDocuments(Object.entries(documents)).map((doc) => (\n                <tr key={doc.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                  <td className=\"px-4 py-4 whitespace-nowrap w-[20%] border-r border-gray-200 dark:border-gray-600\">\n                    <div className=\"flex items-center\">\n                      {doc.type === 'text' && <TextIcon className=\"w-5 h-5 text-blue-500\" />}\n                      {doc.type === 'image' && <ImageIcon className=\"w-5 h-5 text-green-500\" />}\n                      {doc.type === 'plain' && <PlusIcon className=\"w-5 h-5 text-purple-500\" />}\n                      <span className=\"ml-2 text-sm text-gray-900 dark:text-gray-100\">\n                        {doc.type === 'text' ? '텍스트' : doc.type === 'image' ? '이미지' : '직접 입력'}\n                      </span>\n                    </div>\n                  </td>\n                  <td className=\"px-4 py-4 whitespace-nowrap w-[35%] border-r border-gray-200 dark:border-gray-600\">\n                    <span className=\"text-sm text-gray-900 dark:text-gray-100\">{doc.title}</span>\n                  </td>\n                  <td className=\"px-4 py-4 whitespace-nowrap w-[20%] border-r border-gray-200 dark:border-gray-600\">\n                    <span className=\"text-sm text-gray-500 dark:text-gray-400\">\n                      {new Date(doc.created_at).toLocaleString('ko-KR', {\n                        year: 'numeric',\n                        month: '2-digit',\n                        day: '2-digit',\n                        hour: '2-digit',\n                        minute: '2-digit',\n                        second: '2-digit',\n                        hour12: false\n                      })}\n                    </span>\n                  </td>\n                  <td className=\"px-4 py-4 whitespace-nowrap w-[15%] border-r border-gray-200 dark:border-gray-600 text-center\">\n                    <ProgressBadge progress={doc.progress} />\n                  </td>\n                  <td className=\"px-4 py-4 whitespace-nowrap w-[10%] text-center\">\n                    <button\n                      onClick={() => handleDelete(doc.id)}\n                      className=\"inline-flex text-gray-500 hover:text-red-500 dark:text-gray-400 dark:hover:text-red-400 transition-colors\"\n                    >\n                      <TrashIcon className=\"w-5 h-5\" />\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* 직접 입력 버튼에 onClick 핸들러 추가 */}\n      <button \n        onClick={handlePlainTextClick}\n        className=\"flex items-center px-4 py-2 bg-white dark:bg-gray-800 rounded-lg shadow hover:shadow-md transition-all\"\n      >\n        <PlusIcon className=\"w-5 h-5 text-purple-500 mr-2\" />\n        <span className=\"text-sm text-gray-700 dark:text-gray-300\">직접 입력</span>\n      </button>\n\n      {/* 모달 렌더링 */}\n      {isPlainTextModalOpen && <PlainTextModal />}\n    </div>\n  );\n});\n\nexport default DocumentUpload;\n\nconst TextIcon = ({ className }: { className?: string }) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" className={className} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n  </svg>\n);\n\nconst ImageIcon = ({ className }: { className?: string }) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" className={className} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n  </svg>\n);\n\nconst PlusIcon = ({ className }: { className?: string }) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" className={className} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4v16m8-8H4\" />\n  </svg>\n);\n\nconst TrashIcon = ({ className }: { className?: string }) => (\n  <svg \n    xmlns=\"http://www.w3.org/2000/svg\" \n    className={className} \n    fill=\"none\" \n    viewBox=\"0 0 24 24\" \n    stroke=\"currentColor\"\n  >\n    <path \n      strokeLinecap=\"round\" \n      strokeLinejoin=\"round\" \n      strokeWidth={2} \n      d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" \n    />\n  </svg>\n); "],"names":[],"mappings":"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"}},
    {"offset": {"line": 2117, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2123, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/flash/projects/mygpt/frontend/src/components/ai-search/document/DocumentDashboard.tsx"],"sourcesContent":["export default function DocumentDashboard() {\r\n  return (\r\n    <div className=\"space-y-8\">\r\n      <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\">대시보드</h1>\r\n      \r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n        {/* 문서 통계 카드들 */}\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">총 문서</h3>\r\n          {/* 통계 내용 */}\r\n        </div>\r\n        \r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">처리 중</h3>\r\n          {/* 통계 내용 */}\r\n        </div>\r\n        \r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4\">완료</h3>\r\n          {/* 통계 내용 */}\r\n        </div>\r\n      </div>\r\n      \r\n      {/* 추가적인 대시보드 내용 */}\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":";;;;;AAAe,SAAS;IACtB,qBACE,qKAAC;QAAI,WAAU;;0BACb,qKAAC;gBAAG,WAAU;0BAAsD;;;;;;0BAEpE,qKAAC;gBAAI,WAAU;;kCAEb,qKAAC;wBAAI,WAAU;kCACb,cAAA,qKAAC;4BAAG,WAAU;sCAA8D;;;;;;;;;;;kCAI9E,qKAAC;wBAAI,WAAU;kCACb,cAAA,qKAAC;4BAAG,WAAU;sCAA8D;;;;;;;;;;;kCAI9E,qKAAC;wBAAI,WAAU;kCACb,cAAA,qKAAC;4BAAG,WAAU;sCAA8D;;;;;;;;;;;;;;;;;;;;;;;AAQtF"}},
    {"offset": {"line": 2201, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2207, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/flash/projects/mygpt/frontend/src/pages/ai-search/document/index.tsx"],"sourcesContent":["import { useState, useRef } from 'react';\r\nimport Header from '@/components/common/Header';\r\nimport DocumentUpload from '@/components/ai-search/document/DocumentUpload';\r\nimport DocumentDashboard from '@/components/ai-search/document/DocumentDashboard';\r\n\r\ntype MenuType = 'management' | 'dashboard';\r\n\r\nexport default function DocumentManagement() {\r\n  const [currentMenu, setCurrentMenu] = useState<MenuType>('management');\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n  const imageFileInputRef = useRef<HTMLInputElement>(null);\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [isPlainTextModalOpen, setIsPlainTextModalOpen] = useState(false);\r\n  const documentUploadRef = useRef<{ handleFileUpload?: (files: FileList, procType: string) => Promise<void> }>({}); // DocumentUpload의 메서드를 참조하기 위한 ref\r\n\r\n  // 파일 선택 핸들러\r\n  const handleTextFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const files = e.target.files;\r\n    if (!files || files.length === 0) return;\r\n\r\n    // 파일 형식 검사\r\n    for (let i = 0; i < files.length; i++) {\r\n      const file = files[i];\r\n      const allowedTypes = ['.txt', '.pdf'];\r\n      const fileExt = file.name.substring(file.name.lastIndexOf('.')).toLowerCase();\r\n      if (!allowedTypes.includes(fileExt)) {\r\n        alert(`지원하지 않는 파일 형식입니다: ${file.name} (지원 형식: TXT, PDF)`);\r\n        if (fileInputRef.current) fileInputRef.current.value = '';\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (documentUploadRef.current.handleFileUpload) {\r\n      await documentUploadRef.current.handleFileUpload(files, 'text');\r\n    }\r\n  };\r\n\r\n  const handleImageFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const files = e.target.files;\r\n    if (!files || files.length === 0) return;\r\n\r\n    // 파일 형식 검사\r\n    for (let i = 0; i < files.length; i++) {\r\n      const file = files[i];\r\n      const allowedTypes = ['.pptx', '.pdf', '.jpg', '.png'];\r\n      const fileExt = file.name.substring(file.name.lastIndexOf('.')).toLowerCase();\r\n      if (!allowedTypes.includes(fileExt)) {\r\n        alert(`지원하지 않는 파일 형식입니다: ${file.name} (지원 형식: PPTX, PDF, JPG, PNG)`);\r\n        if (imageFileInputRef.current) imageFileInputRef.current.value = '';\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (documentUploadRef.current.handleFileUpload) {\r\n      await documentUploadRef.current.handleFileUpload(files, 'image');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex flex-col bg-white dark:bg-gray-900\">\r\n      <Header />\r\n      \r\n      <main className=\"flex-1 pt-28 px-8\">\r\n        <div className=\"max-w-5xl mx-auto\">\r\n          {/* 상단 메뉴 영역 */}\r\n          <div className=\"flex justify-between items-center mb-8\">\r\n            {/* 업로드 버튼 영역 */}\r\n            <div className=\"flex items-center space-x-4\">\r\n              <input \r\n                type=\"file\" \r\n                ref={fileInputRef} \r\n                onChange={handleTextFileChange} \r\n                accept=\".txt,.pdf\" \r\n                multiple \r\n                className=\"hidden\" \r\n              />\r\n              <input \r\n                type=\"file\" \r\n                ref={imageFileInputRef} \r\n                onChange={handleImageFileChange} \r\n                accept=\".pptx,.pdf,.jpg,.png\" \r\n                multiple \r\n                className=\"hidden\" \r\n              />\r\n              <button\r\n                onClick={() => fileInputRef.current?.click()}\r\n                disabled={isUploading}\r\n                className=\"flex items-center px-4 py-2 bg-white dark:bg-gray-800 rounded-lg shadow hover:shadow-md transition-all disabled:opacity-50\"\r\n              >\r\n                <TextIcon className=\"w-5 h-5 text-blue-500 mr-2\" />\r\n                <span className=\"text-sm text-gray-700 dark:text-gray-300\">텍스트 문서</span>\r\n              </button>\r\n              <button\r\n                onClick={() => imageFileInputRef.current?.click()}\r\n                disabled={isUploading}\r\n                className=\"flex items-center px-4 py-2 bg-white dark:bg-gray-800 rounded-lg shadow hover:shadow-md transition-all disabled:opacity-50\"\r\n              >\r\n                <ImageIcon className=\"w-5 h-5 text-green-500 mr-2\" />\r\n                <span className=\"text-sm text-gray-700 dark:text-gray-300\">이미지 문서</span>\r\n              </button>\r\n              <button\r\n                onClick={() => setIsPlainTextModalOpen(true)}\r\n                disabled={isUploading}\r\n                className=\"flex items-center px-4 py-2 bg-white dark:bg-gray-800 rounded-lg shadow hover:shadow-md transition-all disabled:opacity-50\"\r\n              >\r\n                <PlusIcon className=\"w-5 h-5 text-purple-500 mr-2\" />\r\n                <span className=\"text-sm text-gray-700 dark:text-gray-300\">직접 입력</span>\r\n              </button>\r\n            </div>\r\n\r\n            {/* 메인 메뉴 */}\r\n            <div className=\"flex space-x-4\">\r\n              <button\r\n                onClick={() => setCurrentMenu('management')}\r\n                className={`px-4 py-2 rounded-lg transition-colors ${\r\n                  currentMenu === 'management'\r\n                    ? 'bg-blue-500 text-white'\r\n                    : 'text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800'\r\n                }`}\r\n              >\r\n                Management\r\n              </button>\r\n              <button\r\n                onClick={() => setCurrentMenu('dashboard')}\r\n                className={`px-4 py-2 rounded-lg transition-colors ${\r\n                  currentMenu === 'dashboard'\r\n                    ? 'bg-blue-500 text-white'\r\n                    : 'text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800'\r\n                }`}\r\n              >\r\n                Dashboard\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* 컨텐츠 영역 */}\r\n          {currentMenu === 'management' ? (\r\n            <DocumentUpload ref={documentUploadRef} />\r\n          ) : (\r\n            <DocumentDashboard />\r\n          )}\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 아이콘 컴포넌트들\r\nconst TextIcon = ({ className }: { className?: string }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" className={className} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\r\n  </svg>\r\n);\r\n\r\nconst ImageIcon = ({ className }: { className?: string }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" className={className} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" />\r\n  </svg>\r\n);\r\n\r\nconst PlusIcon = ({ className }: { className?: string }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" className={className} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4v16m8-8H4\" />\r\n  </svg>\r\n); "],"names":[],"mappings":"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"}},
    {"offset": {"line": 2525, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}